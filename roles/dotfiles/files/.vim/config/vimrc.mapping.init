"      .-.     .-.     .-.     .-.     .-.     .-.     .-.
" `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'
"
"
" -----------------------------
"  Nvim Global Settings:
"  Created: 2019/01/16
"  Last Change:
" -----------------------------
" vim:ft=vim:ts=2:sw=2:fdm=marker
"
"
"      .-.     .-.     .-.     .-.     .-.     .-.     .-.
" `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'
"
"
" Vim Initialization: ----------------------------------------------------------
" ------------------------------------------------------------------------------

" Global Mappings {{{


let g:mapleader="\<Space>"
let g:maplocalleader=';'
nnoremap <Space>  <Nop>
xnoremap <Space>  <Nop>
nnoremap ,        <Nop>
xnoremap ,        <Nop>
nnoremap ;        <Nop>
xnoremap ;        <Nop>
nnoremap m        <Nop>
xnoremap m        <Nop>
nnoremap s        <Nop>
xnoremap s        <Nop>
nnoremap t        <Nop>
xnoremap t        <Nop>

" }}}
" Ensure cache directory "{{{

if ! isdirectory(expand($VARPATH))
	" Create missing dirs i.e. cache/{undo,backup}
	call mkdir(expand('$VARPATH/undo'), 'p')
	call mkdir(expand('$VARPATH/backup'))
endif



" }}}
" Load vault settings "{{{

if filereadable(expand('$VIMPATH/.vault.vim'))
	execute 'source' expand('$VIMPATH/.vault.vim')
endif

" }}}
" Setup dein {{{

if &runtimepath !~# '/dein.vim'
	let s:dein_dir = expand('$VARPATH/dein').'/repos/github.com/Shougo/dein.vim'
	if ! isdirectory(s:dein_dir)
		execute '!git clone https://github.com/Shougo/dein.vim' s:dein_dir
	endif

	execute 'set runtimepath+='.substitute(
		\ fnamemodify(s:dein_dir, ':p') , '/$', '', '')
endif

" }}}
" Disable default plugins "{{{
" Disable menu.vim {{{
if has('gui_running')
  set guioptions=Mc
endif
" }}}
" Disable pre-bundled plugins {{{
let g:loaded_getscript = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_gzip = 1
let g:loaded_logiPat = 1
let g:loaded_matchit = 1
let g:loaded_matchparen = 1
let g:netrw_nogx = 1 " disable netrw's gx mapping.
let g:loaded_rrhelper = 1
let g:loaded_ruby_provider = 1
let g:loaded_shada_plugin = 1
let g:loaded_tar = 1
let g:loaded_tarPlugin = 1
let g:loaded_tutor_mode_plugin = 1
let g:loaded_2html_plugin = 1
let g:loaded_vimball = 1
let g:loaded_vimballPlugin = 1
let g:loaded_zip = 1
let g:loaded_zipPlugin = 1
" }}}

" }}}

" Vim Global Configration: -----------------------------------------------------
" ------------------------------------------------------------------------------

" Keys Setup {{{

noremap [S] <Nop>
noremap [T] <Nop>
nmap s [S]
nmap t [T]

" Letter q
" ---------
nnoremap <silent> q :<C-u>:quit<CR>
autocmd MyAutoCmd FileType man nnoremap <silent><buffer> q :<C-u>:quit<CR>
nnoremap Q q
nnoremap gQ @q

" Letter ;
nnoremap ;; :

" Letter -
" ---------
nnoremap <silent> - :silent edit <C-R>=empty(expand('%')) ? '.' : fnameescape(expand('%:p:h'))<CR><CR>

" Letter !
" ---------
nnoremap ! :!

" Letter '
" ---------
noremap ' `

" }}}
" General {{{
syntax enable
set autoread                 " Set to auto read when a file is changed from the outside
set lazyredraw               " Don't update the display while executing macros
set confirm                  " Ask for confirmation
set mouse=nv                 " Disable mouse in command-line mode
set nomodeline               " Disable modline
set report=0                 " Don't report on line changes
set errorbells               " Trigger bell on error
set visualbell               " Use visual bell instead of beeping
set hidden                   " hide buffers when abandoned instead of unload
set fileformats=unix,dos,mac " Use Unix as the standard file type
set magic                    " For regular expressions turn magic on
set path=.,**                " Directories to search when using gf
set virtualedit=block        " Position cursor anywhere in visual block
set synmaxcol=1000           " Don't syntax highlight long lines
set formatoptions+=1         " Don't break lines after a one-letter word
set formatoptions-=t         " Don't auto-wrap text
set nowrap                      " No wrap by default
set linebreak                   " Break long lines at 'breakat'
set breakat=\ \	;:,!?           " Long lines break chars
set nostartofline               " Cursor in same column for few commands
set whichwrap+=h,l,<,>,[,],~    " Move to following line on certain keys
set splitbelow splitright       " Splits open bottom right
set switchbuf=useopen,usetab    " Jump to the first open window in any tab
set switchbuf+=vsplit           " Switch buffer behavior to vsplit
set backspace=indent,eol,start  " Intuitive backspacing in insert mode
set diffopt=filler,iwhite       " Diff mode: show fillers, ignore whitespace
set showfulltag                 " Show tag and tidy search in completion
set complete=.                  " No wins, buffs, tags, include scanning
set completeopt=menuone         " Show menu even for one item
set completeopt+=noselect       " Do not select a match in the menu
if has('patch-7.4.775')
	set completeopt+=noinsert
endif

if has('patch-8.1.0360')
	set diffopt+=internal,algorithm:patience
endif

if exists('+inccommand')
	set inccommand=nosplit
endif

" }}}
" Wildmenu {{{
set wildmenu                          " Enable Wildmenu
set wildmode=longest:full,full        " shell-like autocomplete to unambiguous portion
set wildcharm=<C-z>                   " substitute for 'wildchar' (<Tab>) in macros
set whichwrap=b,h,l,s,<,>,[,],~       " allow <BS>/h/l/<Left>/<Right>/<Space>, ~ to cross line boundaries
set wildignore+=.git,.hg,.svn,.stversions,*.pyc,*.spl,*.o,*.out,*~,%*,.rej,.rei
set wildignore+=*.jpg,*.jpeg,*.png,*.gif,*.zip,**/tmp/**,*.DS_Store
set wildignore+=**/node_modules/**,**/bower_modules/**,*/.sass-cache/*
set wildignore+=application/vendor/**,**/vendor/ckeditor/**,media/vendor/**
set wildignore+=__pycache__,*.egg-info
" }}}
" Tabs and Indents {{{
set textwidth=80    " Text width maximum chars before wrapping
set tabstop=2       " The number of spaces a tab is
set softtabstop=2   " While performing editing operations
set shiftwidth=2    " Number of spaces to use in auto(indent)
set smarttab        " Tab insert blanks according to 'shiftwidth'
set autoindent      " Use same indenting on new lines
set smartindent     " Smart autoindenting on new lines
set shiftround      " Round indent to multiple of 'shiftwidth'
set expandtab       " Insert space characters instead of hardtabs
" set noexpandtab     " Don't expand tabs to spaces.
set breakindent         " soft wrapping with proper indentation

" }}}
" User Interface {{{

set relativenumber      " show line numbers
set noshowmode          " Don't show mode in cmd window
set nomodeline          " Disable mode line
set showtabline=0       " Don't show the tabs line
set laststatus=0        " Don't show a status line

set cmdheight=2         " Height of the command line
set scrolloff=2         " Keep at least 2 lines above/below
set sidescrolloff=5     " Keep at least 5 lines left/right

set shortmess=aoOtTIc   " Shorten messages and don't show intro
set noruler             " Disable default status ruler
set list                " Show hidden characters

set winwidth=30         " Minimum width for active window
set winminwidth=10      " Minimum width for inactive windows
set winheight=1         " Minimum height for active window
set pumheight=15        " Pop-up menu's line height
set helpheight=12       " Minimum help window height
set previewheight=12    " Completion preview height

set cmdwinheight=5      " Command-line lines
set noequalalways       " Don't resize windows on split or close
" set colorcolumn=80    " Highlight the 80th character limit
set colorcolumn=+1      " Highlight when reach 80th character
set display=lastline

" Do not display completion messages {{{
" Patch: https://groups.google.com/forum/#!topic/vim_dev/WeBBjkXE8H8
if has('patch-7.4.314')
	set shortmess+=c
endif
" }}}
" Do not display message when editing files {{{
if has('patch-7.4.1570')
	set shortmess+=F
endif
" }}}
" For snippet_complete marker {{{
if has('conceal') && v:version >= 703
	set conceallevel=2 concealcursor=niv
endif
" }}}

" }}}
" Search {{{
" ---------
set gdefault
set ignorecase      " Search ignoring case
set smartcase       " Keep case when searching with *
set infercase       " Adjust case in insert completion mode
set incsearch       " Incremental search
set hlsearch        " Highlight search results
set wrapscan        " Searches wrap around the end of the file
set showmatch       " Jump to matching bracket
set matchpairs+=<:> " Add HTML brackets to pair matching
set matchtime=1     " Tenths of a second to show the matching paren
set cpoptions-=m    " showmatch will wait 0.5s or until a char is typed

" Use sane (Perl/Python like) regexes
" -----------------------------------
nnoremap / /\v
vnoremap / /\v
nnoremap ? ?\v
vnoremap ? ?\v

" Use ag when executable
" -----------------------------------
if executable('ag')
    set grepprg=ag\ --smart-case\ --line-numbers\
      \ --nocolor\ --nogroup\ --follow
endif

" }}}
" Folding {{{

" Improved Vim fold-text {{{

" function! FoldText()
" " Get first non-blank line
" let fs = v:foldstart
" while getline(fs) =~? '^\s*$' | let fs = nextnonblank(fs + 1)
" endwhile
" if fs > v:foldend
" 	let line = getline(v:foldstart)
" else
" 	let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
" endif
"
" let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
" let foldSize = 1 + v:foldend - v:foldstart
" let foldSizeStr = ' ' . foldSize . ' lines '
" let foldLevelStr = repeat('+--', v:foldlevel)
" let lineCount = line('$')
" let foldPercentage = printf('[%.1f', (foldSize*1.0)/lineCount*100) . '%] '
" let expansionString = repeat('.', w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))
" return line . expansionString . foldSizeStr . foldPercentage . foldLevelStr
" endfunction

" }}}
" FastFold {{{
" Credits: https://github.com/Shougo/shougo-s-github
autocmd MyAutoCmd TextChangedI,TextChanged *
	\ if &l:foldenable && &l:foldmethod !=# 'manual' |
	\   let b:foldmethod_save = &l:foldmethod |
	\   let &l:foldmethod = 'manual' |
	\ endif

autocmd MyAutoCmd BufWritePost *
	\ if &l:foldmethod ==# 'manual' && exists('b:foldmethod_save') |
	\   let &l:foldmethod = b:foldmethod_save |
	\   execute 'normal! zx' |
	\ endif

" if has('folding')
"	set foldenable
"	set foldmethod=syntax
"	set foldlevelstart=00
"	set foldtext=FoldText()
"	set foldopen+=insert,jump     " Commands that auto-unfold
" endif
" }}}
" }}}
" Sessions and views {{{
" What to save for views:
" --------------------------
set viewoptions-=options
set viewoptions+=slash,unix
set fileformat=unix
set fileformats=unix,dos

" What to save in sessions:
" --------------------------
set sessionoptions-=blank
set sessionoptions-=options
set sessionoptions-=globals
set sessionoptions-=folds
set sessionoptions-=help
set sessionoptions-=buffers
set sessionoptions+=tabpages

" }}}
" Clipboard {{{
if has('mac')
let g:clipboard = {
    \   'name': 'macOS-clipboard',
    \   'copy': {
    \      '+': 'pbcopy',
    \      '*': 'pbcopy',
    \    },
    \   'paste': {
    \      '+': 'pbpaste',
    \      '*': 'pbpaste',
    \   },
    \   'cache_enabled': 0,
    \ }
endif
if has('clipboard')
	set clipboard& clipboard+=unnamedplus
endif

" }}}
" Cursor {{{
set cursorline " Only show cursorline in the current window
augroup cline
   au!
   au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
   au WinLeave * setlocal nocursorline
augroup END
" }}}
" Resize {{{
augroup vim_resized " Resize splits when the Vim window is resized
   au!
   au VimResized * :wincmd =
augroup END
" }}}
" Todos Highlight {{{
set iskeyword+=:
augroup hl_todos
      au!
      au BufNewFile,BufRead *.bib syn match bibTodo "\<\(TODO\|FIXME\):"
      au BufNewFile,BufRead *.py syn match pythonTodo "\<\(TODO\|FIXME\):"
      au BufNewFile,BufRead *.snippets syn match snipTODO "\<\(TODO\|FIXME\):"
      au BufNewFile,BufRead *.tex syn match texTodo "\<\(TODO\|FIXME\):"
      au BufNewFile,BufRead {*.vim,vimrc} syn match vimTodo "\<\(TODO\|FIXME\):"
augroup END
" }}}
" Vim Directories {{{
" ---------------
set spelllang=en
set undofile swapfile backup
set directory=$VARPATH/swap//,$VARPATH,~/tmp,/var/tmp,/tmp
set undodir=$VARPATH/undo//,$VARPATH,~/tmp,/var/tmp,/tmp
set backupdir=$VARPATH/backup/,$VARPATH,~/tmp,/var/tmp,/tmp
set viewdir=$VARPATH/view/
set nospell spellfile=$VIMPATH/spell/en.utf-8.add
set undofile
set undolevels=1000   " Maximum number of changes that can be undone
set undoreload=10000  " Maximum number lines to save for undo on a buffer reload

" History saving
" ---------------
set history=2000
if has('nvim')
    "  ShaDa/viminfo:
    "   ' - Maximum number of previously edited files marks
    "   < - Maximum number of lines saved for each register
    "   @ - Maximum number of items in the input-line history to be
    "   s - Maximum size of an item contents in KiB
    "   h - Disable the effect of 'hlsearch' when loading the shada
    set shada='300,<50,@100,s10,h
else
    set viminfo='300,<10,@50,h,n$VARPATH/viminfo
endif

" }}}
" Timing {{{
" ------
set timeout ttimeout
set timeoutlen=1300  " Time out on mappings
set updatetime=550 " Idle time to write swap and trigger CursorHold

" Time out on key codes
set ttimeoutlen=25

" }}}
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

