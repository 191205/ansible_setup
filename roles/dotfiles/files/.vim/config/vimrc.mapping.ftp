" -------------------------------
" Filetype-specific
" LastEdit:  Marge into defult filetype
" -------------------------------

" Reload vim config automatically {{{
execute 'autocmd MyAutoCmd BufWritePost '.$VIMPATH.'/config/*,vimrc nested'
	\ .' source $MYVIMRC | redraw | silent doautocmd ColorScheme'
" }}}

" augroup MyAutoCmd 1-6 {{{
" -------------------------
augroup MyAutoCmd " {{{
	" 1. Highlight current line only on focused window
	autocmd WinEnter,InsertLeave * set cursorline
	autocmd WinLeave,InsertEnter * set nocursorline
	" 2. Automatically set read-only for files being edited elsewhere
	autocmd SwapExists * nested let v:swapchoice = 'o'
	" 3. Check if file changed when its window is focus
	" more eager than 'autoread'
	autocmd WinEnter,FocusGained * checktime
	autocmd TabLeave * let g:lasttab = tabpagenr()
	autocmd Syntax * if 5000 < line('$') | syntax sync minlines=200 | endif
	" }}}
	" 4. Update filetype on save if empty {{{
	autocmd BufWritePost * nested
		\ if &l:filetype ==# '' || exists('b:ftdetect')
		\ |   unlet! b:ftdetect
		\ |   filetype detect
		\ | endif
	" }}}
	" 5. Reload Vim script automatically {{{
	autocmd BufWritePost,FileWritePost *.vim nested
		\ if &l:autoread > 0 | source <afile> |
		\   echo 'source '.bufname('%') |
		\ endif
	" }}}
	" 6. Always go to last known cursor position. {{{
	" Don't do it when the position is invalid or when inside an event handler
	autocmd BufReadPost *
		\ if &ft !~ '^git\c' && ! &diff && line("'\"") > 0 && line("'\"") <= line("$")
		\|   execute 'normal! g`"zvzz'
		\| endif
	" }}}
	" }}}
" Filetypes autocmd {{{
" ------------------------
		" Vim {{{
				" Set fold method
				autocmd FileType vim setlocal foldmethod=marker
				" Don't insert comment leader automatically
				autocmd FileType vim setlocal formatoptions-=ro
				" Help settings
				autocmd FileType help setlocal textwidth=78
				" Place help window at the bottom
				autocmd BufWinEnter *.txt if &ft == 'help' | wincmd J | endif

		" }}}
		" Tex: {{{
			autocmd Filetype bib setlocal commentstring=%%s foldmethod=marker
			autocmd Filetype bib setlocal spell
			autocmd Filetype bib setlocal shiftwidth=2 tabstop=2 softtabstop=2
			autocmd FileType tex setlocal iskeyword=@,48-57,_,192-255,:
			autocmd FileType tex setlocal comments+=b:\\item
			" Don't reindent when typing brackets, parenthesis, braces or ampersands:
			autocmd FileType tex setlocal indentkeys=!^F,o,O,0=\\item
			" Highlight dmath environments as equation environments
			autocmd FileType tex call TexNewMathZone("M","dmath",1)
			" Set dictionary in neovim (for deoplete)
			autocmd FileType tex setlocal dictionary=$DOTVIM/ftplugin/tex/tex_dictionary.dict
		" }}}
		" Crontab: {{{
			autocmd FileType crontab setlocal nobackup nowritebackup
		" }}}
		" Css: {{{
			autocmd FileType css setlocal equalprg=csstidy\ -\ --silent=true
		" }}}
		" Yaml: {{{
			autocmd FileType yaml.docker-compose setlocal expandtab
		" }}}
		" TOML {{{
			autocmd BufNewFile,BufReadPost Pipfile set filetype=toml
		" }}}
		" Gitcommit: {{{
			autocmd FileType gitcommit setlocal spell
			autocmd FileType gitcommit,qfreplace setlocal nofoldenable
		" }}}
		" Javascript:  {{{
			autocmd FileType javascript setlocal commentstring=//%s
			autocmd FileType css,javascript,jsx,javascript.jsx
				\ setlocal backupcopy=yes
				\| setlocal equalprg=jslint
		" }}}
		" Zsh: {{{
			autocmd FileType zsh setlocal foldenable foldmethod=marker
		" }}}
		" html {{{
			autocmd FileType html
				\ setlocal path+=./;/
				\ | setlocal equalprg=tidy\ -i\ -q
			autocmd Filetype html setlocal shiftwidth=2 tabstop=2 softtabstop=2
		" }}}
		" json {{{
			autocmd FileType json setlocal equalprg=python\ -c\ json.tool
		" }}}
		" markdown {{{
			autocmd FileType markdown
				\ set expandtab
				\ | setlocal spell autoindent formatoptions=tcroqn2 comments=n:>
			autocmd BufNewFile,BufReadPost *.md set filetype=markdown
			autocmd FileType markdown setlocal omnifunc=htmlcomplete#CompleteTags
			autocmd Filetype markdown setlocal textwidth=75 nolinebreak spell
		" }}}
		" apache {{{
			autocmd FileType apache setlocal path+=./;/
		" }}}
		" xml {{{
			autocmd FileType xml
				\ setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
		" }}}
		" SQL {{{
			autocmd Filetype sql setlocal commentstring=--%s
			autocmd Filetype sql setlocal shiftwidth=2 tabstop=2 softtabstop=2
			autocmd BufNewFile,BufReadPost sqlplus_login set filetype=sql
			autocmd BufNewFile,BufReadPost *.{pgsql,mssql,mysql} set filetype=sql
			autocmd Filetype sql syn keyword sqlKeyword INNER RIGHT LEFT OUTER JOIN OVER
								\ PARTITION
			autocmd Filetype sql syn keyword sqlFunction DATE_PARSE DATE_DIFF DATE_TRUNC
								\ LAG ARBITRARY COUNT_IF LEAD JSON_EXTRACT
			autocmd Filetype sql syn keyword sqlType INT
		" }}}
		" Mail (and mutt) {{{
			autocmd Filetype mail setlocal formatoptions=ta
			autocmd Filetype mail setlocal textwidth=72
			autocmd Filetype mail setlocal spell
			autocmd Filetype muttrc setlocal commentstring=#%s
		" }}}
		" Config {{{
			autocmd BufNewFile,BufReadPost *polybar/config,*rofi/config,dunstrc,*.dirs,
							\zathurarc,*mpv/*.conf,*onedrive/config,*fdignore,*vimivrc,
							\*.conf
							\ set filetype=config foldmethod=marker

			autocmd FileType conf setlocal foldmethod=marker

		" }}}
		" Snippets {{{
			autocmd FileType snippets setlocal foldmethod=marker foldmarker=**{,**}
			" Use tab instead of spaces because snippets expand to current tab settings
			autocmd FileType snippets setlocal noexpandtab
		" }}}
	" augroup END {{{
		augroup END
	" }}}
" -------------------------
"  }}}
" Internal Plugin Settings {{{
" ------------------------
	" PHP {{{
	let g:PHP_removeCRwhenUnix = 0

	" }}}
	" Python {{{
	let g:python_highlight_all = 1

	" }}}
	" Vim {{{
	let g:vimsyntax_noerror = 1
	let g:vim_indent_cont = &shiftwidth

	" }}}
	" Bash {{{
	let g:is_bash = 1

	" }}}
	" Java {{{
	let g:java_highlight_functions = 'style'
	let g:java_highlight_all = 1
	let g:java_highlight_debug = 1
	let g:java_allow_cpp_keywords = 1
	let g:java_space_errors = 1
	let g:java_highlight_functions = 1

	" }}}
	" JavaScript {{{
	let g:SimpleJsIndenter_BriefMode = 1
	let g:SimpleJsIndenter_CaseIndentLevel = -1

	" }}}
	" Markdown {{{
	let g:markdown_fenced_languages = [
		\  'css',
		\  'javascript',
		\  'js=javascript',
		\  'json=javascript',
		\  'python',
		\  'py=python',
		\  'docker=Dockerfile',
		\  'makefile=make',
		\  'sh',
		\  'sass',
		\  'xml',
		\  'yaml',
		\  'vim'
		\]

	" }}}
	" Folding {{{
	" augroup: a
	" function: f
	" let g:vimsyn_folding = 'af'
	let g:tex_fold_enabled = 1
	let g:xml_syntax_folding = 1
	let g:php_folding = 2
	let g:php_phpdoc_folding = 1
	let g:perl_fold = 1
	" }}}
" }}}
" Filetypes settings {{{
" ------------------------
	" (La)TeX {{{

	" Tex generic settings
	let g:tex_flavor = 'latex'          " Filetype detection
	let g:tex_conceal = ''              " Don't replace characters by Unicode glyphs
	let g:tex_comment_nospell = 0       " Allow spell checking in comments

	" Indent settings (provided by Vim indent file)
	let g:tex_indent_items = 1          " Continuation lines have shiftwidth
	let g:tex_items = '\\item'          " Redundant since we set indentkeys below
	let g:tex_itemize_env = 'itemize\|enumerate\|steps'
	let g:tex_indent_brace = 0
	" }}}
	" Python {{{
	"
	" " Note: Most python settings are in ftplugin folder
	"
	" " Don't fold docstrings; see https://github.com/tmhedberg/SimpylFold
	" let g:SimpylFold_fold_docstring = 0
	" " Better highlighting; see https://github.com/vim-python/python-syntax
	" let g:python_highlight_all = 1
	"
	" augroup ft_py
	" 		au!
	" 		" Fix else: syntax highlight and comment string
	" 		au FileType python setlocal iskeyword-=:
	" 		au Filetype python setlocal commentstring=#%s
	" 		" pdbrc is a python file and python notebooks and Pipfile.lock json files
	" 		au BufNewFile,BufReadPost pdbrc set filetype=python
	" 		au BufNewFile,BufReadPost *.ipynb,Pipfile.lock set filetype=json
	"
	" 		" Highlight all python functions
	" 		au Filetype python syn match pythonAttribute2 /\.\h\w*(/hs=s+1,he=e-1
	" 		au Filetype python hi def link pythonAttribute2 Function
	" 		" Add some keywords
	" 		au Filetype python syn keyword pythonBuiltinFunc breakpoint
	" augroup END
	"
	" " }}}
	" QuickFix {{{

	" Note: here we also include preview window settings

	augroup ft_quickfix
			au!
			au Filetype qf setlocal colorcolumn="" textwidth=0
			au Filetype qf call s:AdjustWindowHeight(1, 15)
			au Filetype qf nnoremap <buffer><silent> q :bdelete<CR>
			au Filetype qf nnoremap <buffer><silent> Q :bdelete<CR>
			" Automatically close corresponding loclist when quitting a window
			au QuitPre,BufDelete * if &filetype != 'qf' | silent! lclose | endif
	augroup END

	" Set window to the bottom and automatically adjust window to fit content
	function! s:AdjustWindowHeight(minheight, maxheight)
			execute 'wincmd J|' . max([min([line('$'), a:maxheight]), a:minheight]) .
									\ 'wincmd _'
	endfunction

	" Maps (for both quickfix and location list)
	nnoremap <silent> <Leader>pc :pclose<cr>
	nnoremap <silent> <Leader>qf :copen<cr>
	nnoremap <silent> <Leader>ll :lopen<cr>
	nnoremap <silent> <Leader>qc :cclose<cr>
	nnoremap <silent> <Leader>lc :lclose<cr>
	nnoremap <silent> ]q :<C-U>execute v:count1 . 'cnext'<CR>
	nnoremap <silent> [q :<C-U>execute v:count1 . 'cprevious'<CR>
	nnoremap <silent> ]l :<C-U>execute v:count1 . 'lnext'<CR>
	nnoremap <silent> [l :<C-U>execute v:count1 . 'lprevious'<CR>
	nnoremap <silent> [Q :cfirst<CR>
	nnoremap <silent> ]Q :clast<CR>

	" }}}
" -------------------------
"  }}}

" vim:ft=vim:ts=2:sw=2:fdm=marker
